diff --git a/Cargo.lock b/Cargo.lock
deleted file mode 100644
index ccfeb2c..0000000
--- a/Cargo.lock
+++ /dev/null
@@ -1,7 +0,0 @@
-# This file is automatically @generated by Cargo.
-# It is not intended for manual editing.
-version = 3
-
-[[package]]
-name = "untitled"
-version = "0.1.0"
diff --git a/Cargo.toml b/Cargo.toml
deleted file mode 100644
index 62ea391..0000000
--- a/Cargo.toml
+++ /dev/null
@@ -1,8 +0,0 @@
-[package]
-name = "untitled"
-version = "0.1.0"
-edition = "2021"
-
-# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
-
-[dependencies]
diff --git a/src/adjacency_list.rs b/src/adjacency_list.rs
deleted file mode 100644
index d3a0e88..0000000
--- a/src/adjacency_list.rs
+++ /dev/null
@@ -1,28 +0,0 @@
-fn adjacency_list() {
-    const V: usize = 10;
-    let mut adj:Vec<Vec<usize>> = vec![vec![]; V];
-    adj[1].push(2);
-    adj[2].push(1);
-    adj[1].push(3);
-    adj[3].push(1);
-    adj[3].push(4);
-    adj[4].push(3);
-
-    let mut visited = vec![false; V];
-
-    for i in 0..V {
-        if adj[i].len() != 0 && !visited[i] {
-            go(&i, &adj, &mut visited)
-        }
-    }
-}
-
-fn go(i: &usize, adj: &Vec<Vec<usize>>, visited: &mut Vec<bool>) {
-    println!("{i}");
-    visited[*i] = true;
-
-    for there in &adj[*i] {
-        if visited[*there] { continue; }
-        go(&there, adj, visited);
-    }
-}
\ No newline at end of file
diff --git a/src/adjacency_matrix.rs b/src/adjacency_matrix.rs
deleted file mode 100644
index ef9cca3..0000000
--- a/src/adjacency_matrix.rs
+++ /dev/null
@@ -1,27 +0,0 @@
-use std::os::unix::raw::gid_t;
-
-fn adjacency_matrix() {
-    let M:usize = 10;
-    let mut adj = vec![vec![false; M]; M];
-    let mut visit = vec![false; M];
-    adj[1][2] = true; adj[2][1] = true;
-    adj[1][3] = true; adj[3][1] = true;
-    adj[3][4] = true; adj[4][3] = true;
-
-    for i in 0..M {
-        for j in 0..M {
-            if adj[i][j] && !visit[i] {
-                go(i, &adj, &mut visit);
-            }
-        }
-    }
-}
-
-fn go(index:usize, adj:&Vec<Vec<bool>>, visit: &mut Vec<bool>) {
-    println!("{}", index);
-    visit[index] = true;
-    for j in 0..10 {
-        if visit[index] { continue; }
-        if adj[index][j] { go(index, adj, visit); }
-    }
-}
\ No newline at end of file
diff --git a/src/dfs.rs b/src/dfs.rs
deleted file mode 100644
index 966d7d3..0000000
--- a/src/dfs.rs
+++ /dev/null
@@ -1,9 +0,0 @@
-fn dfs(u: usize, adj: Vec<usize>, visited: Vec<bool>) {
-    visited[u] = true;
-
-    for v in adj[u] {
-        if !visited[v] {
-            dfs(v, adj, visited);
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/direction_vector.rs b/src/direction_vector.rs
deleted file mode 100644
index dcc7651..0000000
--- a/src/direction_vector.rs
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
-Q. 3 * 3 맵을 입력받아야 함. 이 맵은 1과 0으로 이루어져있고 {0, 0}은 무조건 1임을 보장한다.
-{0, 0}부터 4방향을 기준으로 한칸씩 탐색해나가며 방문한 정점은 다시 방문하지 않으며 방문하는 좌표를 출력하는 코드.
-0은 갈 수 없는 지역. 1은 갈 수 있는 지역을 구현하시오.
-
-1 0 1
-1 0 1
-0 1 1
-*/
-fn four_way_search() {
-    const n:usize = 3;
-    let mut visited = vec![vec![false; n]; n];
-    let mut map = vec![vec![0; n]; n];
-
-    for y in 0..n {
-        let mut buffer = String::new();
-        stdin().read_line(&mut buffer).unwrap();
-        let buffer: Vec<usize> = buffer.split_ascii_whitespace()
-            .map(|x| x.trim().parse::<usize>().unwrap())
-            .collect();
-        for x in 0..n {
-            map[y][x] = buffer[x];
-        }
-    }
-
-    go(&map, &mut visited, 0, 0);
-}
-
-fn go(map: &Vec<Vec<usize>>, visited:&mut Vec<Vec<bool>>, y:usize, x:usize) {
-    let dy:Vec<isize> = vec![-1, 0, 1, 0];
-    let dx:Vec<isize> = vec![0, 1, 0, -1];
-
-    visited[y][x] = true;
-    println!("y: {y}, x: {x}");
-
-    for i in 0..4 {
-        let ny:isize = y as isize + dy[i];
-        let nx:isize = x as isize+ dx[i];
-        if ny < 0 || ny >= 3 || nx < 0 || nx >=3 { continue }
-        if map[ny as usize][nx as usize] == 0 { continue }
-        if visited[ny as usize][nx as usize] { continue }
-        go(&map, visited, ny as usize, nx as usize);
-    }
-}
\ No newline at end of file
diff --git a/src/main.rs b/src/main.rs
deleted file mode 100644
index a8df135..0000000
--- a/src/main.rs
+++ /dev/null
@@ -1,4 +0,0 @@
-use std::io;
-
-fn main() {
-}
\ No newline at end of file
diff --git a/src/pr_1012.rs b/src/pr_1012.rs
deleted file mode 100644
index e1a66db..0000000
--- a/src/pr_1012.rs
+++ /dev/null
@@ -1,62 +0,0 @@
-use std::io;
-use std::io::Write;
-
-fn pr_1012() {
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let t:usize = buffer.trim().parse::<usize>().unwrap();
-
-    let mut result_buffer = String::new();
-    use std::fmt::Write;
-    for _ in 0..t {
-        let mut buffer = String::new();
-        io::stdin().read_line(&mut buffer).unwrap();
-        let buffer:Vec<usize> = buffer.split_ascii_whitespace().map(|x| x.trim().parse::<usize>().unwrap()).collect();
-        let (m, n, k):(usize, usize, usize) = (buffer[0], buffer[1], buffer[2]);
-
-        let mut map = vec![vec![0; m]; n];
-        let mut visited = vec![vec![false; m]; n];
-        for _ in 0..k {
-            let mut buffer = String::new();
-            io::stdin().read_line(&mut buffer).unwrap();
-            let buffer:Vec<usize> = buffer.split_ascii_whitespace().map(|x| x.trim().parse::<usize>().unwrap()).collect();
-            let (x, y) = (buffer[0], buffer[1]);
-            map[y][x] = 1;
-        }
-
-        let mut ret = 0;
-        for i in 0..n {
-            for j in 0..m {
-                if map[i][j] == 0 { continue }
-                if visited[i][j] { continue }
-                dfs(j, i, &map, &mut visited, m, n);
-                ret += 1;
-            }
-        }
-
-        writeln!(result_buffer, "{ret}").unwrap();
-    }
-
-    print!("{}", result_buffer);
-}
-
-fn dfs(x:usize, y:usize, map:&Vec<Vec<usize>>, visited:&mut Vec<Vec<bool>>, max_x:usize, max_y:usize) {
-    let dy: Vec<isize> = vec![-1, 0, 1, 0];
-    let dx: Vec<isize> = vec![0, 1, 0, -1];
-
-    visited[y][x] = true;
-
-    for i in 0..4 {
-        let my = dy[i] + y as isize;
-        let mx = dx[i] + x as isize;
-
-        if my < 0 || my >= max_y as isize || mx < 0 || mx >= max_x as isize { continue }
-
-        let mx = mx as usize;
-        let my = my as usize;
-        if map[my][mx] == 0 { continue }
-        if visited[my][mx] { continue }
-
-        dfs(mx, my, map, visited, max_x, max_y);
-    }
-}
\ No newline at end of file
diff --git a/src/pr_1213.rs b/src/pr_1213.rs
deleted file mode 100644
index 5298b1b..0000000
--- a/src/pr_1213.rs
+++ /dev/null
@@ -1,36 +0,0 @@
-pub fn pr_1213() {
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    buffer = buffer.trim().parse::<String>().unwrap();
-
-    let mut cnt:Vec<usize> = vec![0; 26];
-    for char in buffer.chars() {
-        let index = char as usize - 65;
-        cnt[index] += 1;
-    }
-
-    let mut result = String::new();
-    let mut odd_count = 0;
-    for index in (0..cnt.len()).rev() {
-
-        let mut count = cnt[index];
-        let char = char::from_u32((index + 65) as u32).unwrap();
-
-        if count%2 == 1 {
-            count -= 1;
-            odd_count = odd_count + 1;
-            if odd_count > 1 {
-                result = "I'm Sorry Hansoo".to_string();
-                break;
-            }
-            result.insert(result.len()/2, char);
-        }
-
-        for _ in 0..count/2 {
-            result.push(char);
-            result.insert(0, char);
-        }
-    }
-
-    println!("{}", result);
-}
\ No newline at end of file
diff --git a/src/pr_1620.rs b/src/pr_1620.rs
deleted file mode 100644
index 5abedda..0000000
--- a/src/pr_1620.rs
+++ /dev/null
@@ -1,37 +0,0 @@
-pub fn pr_1620() {
-    let mut input = String::new();
-    io::stdin().read_line(&mut input).unwrap();
-    let mut input:Vec<usize> = input.split_ascii_whitespace().map(|x| x.trim().parse::<usize>().unwrap()).collect();
-    let (n, m ):(usize, usize) = (input[0], input[1]);
-
-    let mut pokemon_map1:HashMap<String, usize> = HashMap::new();
-    let mut pokemon_map2:HashMap<usize, String> = HashMap::new();
-
-    for i in 1..n+1 {
-        let mut input = String::new();
-        io::stdin().read_line(&mut input).unwrap();
-        input = input.trim().parse::<String>().unwrap();
-        let input_clone = input.clone();
-        pokemon_map1.insert(input, i);
-        pokemon_map2.insert(i, input_clone);
-    }
-
-    for _ in 0..m {
-        let mut buf:String = String::new();
-        io::stdin().read_line(&mut buf).unwrap();
-        buf = buf.trim().parse::<String>().unwrap();
-
-        if is_string_numeric(&buf)  {
-            let buf:usize = buf.parse::<usize>().unwrap();
-            println!("{}", pokemon_map2.get(&buf).unwrap());
-        }
-        else {
-            let buf:String = buf.parse::<String>().unwrap();
-            println!("{}", pokemon_map1.get(&*buf).unwrap());
-        }
-    }
-}
-
-fn is_string_numeric(str: &String) -> bool {
-    str.parse::<usize>().is_ok()
-}
diff --git a/src/pr_1629.rs b/src/pr_1629.rs
deleted file mode 100644
index 393bc04..0000000
--- a/src/pr_1629.rs
+++ /dev/null
@@ -1,22 +0,0 @@
-use std::io;
-
-pub fn pr_1629() {
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let num_list:Vec<u64> = buffer.split_ascii_whitespace().map(|x| x.trim().parse::<u64>().unwrap()).collect();
-    let (a, b, c) = (num_list[0], num_list[1], num_list[2]);
-
-    println!("{}", go(a, b, c));
-}
-
-fn go(a:u64, b:u64, c:u64) -> u64 {
-    println!("{}", a%c);
-    if b == 1 { return a % c; }
-
-    let mut ret = go(a, b/2, c);
-    ret = (ret * ret) % c;
-
-    if b % 2 == 1 { ret = (ret * a) % c; }
-
-    ret
-}
diff --git a/src/pr_1940.rs b/src/pr_1940.rs
deleted file mode 100644
index d78ca03..0000000
--- a/src/pr_1940.rs
+++ /dev/null
@@ -1,30 +0,0 @@
-pub fn pr_1940() {
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let n = buffer.trim().parse::<usize>().unwrap();
-
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let m = buffer.trim().parse::<usize>().unwrap();
-
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let num_list:Vec<usize> = buffer.split_ascii_whitespace().map(|x| x.trim().parse::<usize>().unwrap()).collect();
-
-    if m > 200000 {
-        println!("{}", 0);
-    }
-    else {
-        let mut count = 0;
-
-        for i in 0..num_list.len()-1 {
-            for j in i+1..num_list.len() {
-                if m == num_list[i] + num_list[j] {
-                    count += 1;
-                }
-            }
-        }
-
-        println!("{}", count);
-    }
-}
\ No newline at end of file
diff --git a/src/pr_1992.rs b/src/pr_1992.rs
deleted file mode 100644
index 1c6360b..0000000
--- a/src/pr_1992.rs
+++ /dev/null
@@ -1,42 +0,0 @@
-fn pr_1992() {
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let n = buffer.trim().parse::<usize>().unwrap();
-
-    let mut map:Vec<Vec<usize>> = vec![vec![0; n]; n];
-
-    for i in 0..n {
-        let mut buffer = String::new();
-        io::stdin().read_line(&mut buffer).unwrap();
-        let mut buffer:Vec<String> = buffer.trim().split("").map(|x| x.trim().parse::<String>().unwrap()).collect();
-        for j in 0..n {
-            map[i][j] = buffer[j + 1].parse::<usize>().unwrap();
-        }
-    }
-
-    println!("{}", go(0, 0, n, &map));
-}
-
-// (x: 0, y: 0)
-fn go(x:usize, y:usize, size:usize, map:&Vec<Vec<usize>>) -> String {
-    if size == 1 { return map[y][x].to_string() }
-    let b = map[y][x];
-    let mut ret = String::new();
-
-    for i in y..y+size {
-        for j in x..x+size {
-            if map[i][j] != b {
-                ret.push_str("(");
-                ret.push_str(&*go(x, y, size / 2, map));
-                ret.push_str(&*go(x + size / 2, y, size / 2, map));
-                ret.push_str(&*go(x, y + size / 2, size / 2, map));
-                ret.push_str(&*go(x + size / 2, y + size / 2, size / 2, map));
-                ret.push_str(")");
-
-                return ret
-            }
-        }
-    }
-
-    map[y][x].to_string()
-}
\ No newline at end of file
diff --git a/src/pr_2178.rs b/src/pr_2178.rs
deleted file mode 100644
index a340465..0000000
--- a/src/pr_2178.rs
+++ /dev/null
@@ -1,48 +0,0 @@
-fn pr_2178() {
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let buffer:Vec<usize> = buffer.split_ascii_whitespace().map(|x| x.trim().parse::<usize>().unwrap()).collect();
-    let (n, m) = ( buffer[0], buffer[1] );
-
-    let mut map:Vec<Vec<usize>> = vec![vec![0; m]; n];
-    let mut visited:Vec<Vec<usize>> = vec![vec![0; m]; n];
-
-    for i in 0..n {
-        let mut buffer = String::new();
-        io::stdin().read_line(&mut buffer).unwrap();
-        let buffer:Vec<String> = buffer.trim().split("").map(|x| x.trim().parse::<String>().unwrap()).collect();
-        for j in 0..m {
-            map[i][j] = buffer[j+1].parse::<usize>().unwrap();
-        }
-    }
-
-    let (sy, sx) = (0, 0);
-    bfs(sy, sx, &map, &mut visited, (n as isize, m as isize));
-
-    let (ey, ex) = (n-1, m-1);
-    print!("{}", visited[ey][ex]);
-}
-
-fn bfs(y:isize, x:isize, map: &Vec<Vec<usize>>, visited: &mut Vec<Vec<usize>>, (n, m):(isize, isize)) {
-    let dy:Vec<isize> = vec![-1, 0, 1, 0];
-    let dx:Vec<isize> = vec![0, 1, 0, -1];
-
-    let mut queue = LinkedList::new();
-    queue.push_back((y, x));
-    visited[y as usize][x as usize] = 1;
-
-    while queue.len() != 0 {
-        let (y, x) = queue.pop_front().unwrap();
-        for i in 0..4 {
-            let ny = dy[i] + y;
-            let nx = dx[i] + x;
-
-            if ny < 0 || ny >= n || nx < 0 || nx >= m { continue }
-            if map[ny as usize][nx as usize] == 0 { continue }
-            if visited[ny as usize][nx as usize] != 0 { continue }
-
-            visited[ny as usize][nx as usize] = visited[y as usize][x as usize] + 1;
-            queue.push_back((ny, nx));
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/pr_2468.rs b/src/pr_2468.rs
deleted file mode 100644
index 36ea2fa..0000000
--- a/src/pr_2468.rs
+++ /dev/null
@@ -1,56 +0,0 @@
-fn pr_2468() {
-    let mut input = String::new();
-    io::stdin().read_line(&mut input).unwrap();
-    let m = input.trim().parse::<usize>().unwrap();
-
-    let mut map:Vec<Vec<usize>> = vec![vec![0; m]; m];
-
-    for i in 0..m {
-        let mut input = String::new();
-        io::stdin().read_line(&mut input).unwrap();
-        let input:Vec<usize> = input.trim().split_ascii_whitespace().map(|x| x.trim().parse::<usize>().unwrap()).collect();
-        for j in 0..m {
-            map[i][j] = input[j];
-        }
-    }
-
-    let mut ret = 0;
-
-    for d in 0..101 {
-        let mut visited:Vec<Vec<bool>> = vec![vec![false; m]; m];
-
-        let mut count = 0;
-        for y in 0..m {
-            for x in 0..m {
-                if map[y][x] > d && !visited[y][x] {
-                    dfs(x, y, &map, &mut visited, m, d);
-                    count += 1;
-                }
-            }
-        }
-        if count > ret {
-            ret = count;
-        }
-    }
-
-    print!("{ret}");
-}
-
-fn dfs(x:usize, y:usize, map: &Vec<Vec<usize>>, visited:&mut Vec<Vec<bool>>, m:usize, d:usize) {
-    let dy :Vec<isize> = vec![-1, 0, 1, 0];
-    let dx :Vec<isize> = vec![0, 1, 0, -1];
-
-    visited[y][x] = true;
-    for i in 0..4 as usize {
-        let my = dy[i] + y as isize;
-        let mx = dx[i] + x as isize;
-
-        if my < 0 || my >= m as isize || mx < 0 || mx >= m as isize{ continue }
-        let my:usize = my as usize;
-        let mx:usize = mx as usize;
-        if map[my][mx] <= d { continue }
-        if visited[my][mx] { continue }
-
-        dfs(mx, my, map, visited, m, d);
-    }
-}
\ No newline at end of file
diff --git a/src/pr_2559.rs b/src/pr_2559.rs
deleted file mode 100644
index 2aa6a94..0000000
--- a/src/pr_2559.rs
+++ /dev/null
@@ -1,27 +0,0 @@
-pub fn pr_2559() {
-    let mut input = String::new();
-    io::stdin().read_line(&mut input).unwrap();
-    let input:Vec<usize> = input.split_ascii_whitespace().map(|x| x.trim().parse::<usize>().unwrap()).collect();
-
-    let (n, k):(usize, usize) = (*input.get(0).unwrap(), *input.get(1).unwrap());
-
-    let mut num_list = String::new();
-    io::stdin().read_line(&mut num_list).unwrap();
-    let num_list:Vec<isize> = num_list.split_ascii_whitespace().map(|x| x.trim().parse::<isize>().unwrap()).collect();
-
-    let mut psum:Vec<isize> = vec![num_list[0]];
-    for i in 1..n {
-        psum.push(psum[i-1] + num_list[i]);
-    }
-
-    let mut ret = -10000004;
-
-    for i in k..n {
-        // println!("{}", i);
-        if psum[i] - psum[i- k] > ret {
-            ret = psum[i] - psum[i - k];
-        }
-    }
-
-    println!("{}", ret);
-}
\ No newline at end of file
diff --git a/src/pr_4375.rs b/src/pr_4375.rs
deleted file mode 100644
index 3c2b070..0000000
--- a/src/pr_4375.rs
+++ /dev/null
@@ -1,29 +0,0 @@
-use std::io;
-use std::fmt::Write;
-
-pub fn pr_4375() {
-    let mut buffer = String::new();
-    loop {
-        let mut input = String::new();
-        io::stdin().read_line(&mut input).unwrap();
-        let num = match input.trim().parse::<u32>() {
-            Ok(num) => { num }
-            Err(_) => { break; }
-        };
-
-        let mut ret = 1;
-        let mut count = 1;
-        loop {
-            if count % num == 0 {
-                writeln!(&mut buffer, "{}", ret).unwrap();
-                break;
-            }
-            else {
-                count = count * 10 + 1;
-                count %= num;
-                ret += 1;
-            }
-        }
-    }
-    print!("{buffer}");
-}
\ No newline at end of file
diff --git a/src/pr_9375.rs b/src/pr_9375.rs
deleted file mode 100644
index 2e4f392..0000000
--- a/src/pr_9375.rs
+++ /dev/null
@@ -1,34 +0,0 @@
-pub fn pr_9375() {
-    let mut str = String::new();
-    io::stdin().read_line(&mut str).unwrap();
-
-    let test_case_count = str.trim().parse::<usize>().unwrap();
-    for _ in 0..test_case_count { // test case count
-        let mut n = String::new();
-        io::stdin().read_line(&mut n).unwrap();
-        let n:usize = n.trim_end().parse::<usize>().unwrap();
-        let mut dress_map:HashMap<String, usize> = HashMap::new();
-
-        for _ in 0..n { // 의상의 수
-            let mut input = String::new();
-            io::stdin().read_line(&mut input).unwrap();
-            let input:Vec<String> = input.split_ascii_whitespace().map(|x| x.trim().parse::<String>().unwrap()).collect();
-            let category:String = input.last().unwrap().to_owned();
-
-            let dress_count = dress_map.get(&category);
-            if dress_count.is_none() {
-                dress_map.insert(category, 1);
-            }
-            else {
-                dress_map.insert(category, dress_count.unwrap()+1);
-            }
-        }
-
-        let mut ret = 1;
-        for map in dress_map {
-            ret *= map.1+1;
-        }
-
-        println!("{}", ret-1)
-    }
-}
\ No newline at end of file
diff --git a/src/pr_9996.rs b/src/pr_9996.rs
deleted file mode 100644
index 12913bb..0000000
--- a/src/pr_9996.rs
+++ /dev/null
@@ -1,33 +0,0 @@
-pub fn pr_9996() {
-    let mut m = String::new();
-    let mut pattern = String::new();
-
-    io::stdin().read_line(&mut m).unwrap();
-    let m:i32 = m.trim().parse::<i32>().unwrap();
-
-    io::stdin().read_line(&mut pattern).unwrap();
-    let pattern:Vec<String> = pattern.split("*").map(|x| x.trim().parse::<String>().unwrap()).collect();
-    let first_patter:String = pattern.first().unwrap().to_string();
-    let last_patter:String = pattern.last().unwrap().to_string();
-
-    let mut result:Vec<String> = vec![];
-    for _ in 0..m {
-        let mut input = String::new();
-        io::stdin().read_line(&mut input).unwrap();
-        input = input.trim().parse::<String>().unwrap();
-
-        let fist_word = input[0..first_patter.len()].to_string();
-        let last_word = input[input.len()-last_patter.len()..].to_string();
-
-        if first_patter == fist_word && last_patter == last_word {
-            result.push("DA".to_string());
-        }
-        else {
-            result.push("NE".to_string());
-        }
-    }
-
-    for i in result {
-        println!("{}", i);
-    }
-}
\ No newline at end of file
diff --git "a/src/\354\242\205\355\231\224\353\212\224_\353\260\251\352\265\254\354\237\201\354\235\264\354\225\274.rs" "b/src/\354\242\205\355\231\224\353\212\224_\353\260\251\352\265\254\354\237\201\354\235\264\354\225\274.rs"
deleted file mode 100644
index cfb19c2..0000000
--- "a/src/\354\242\205\355\231\224\353\212\224_\353\260\251\352\265\254\354\237\201\354\235\264\354\225\274.rs"
+++ /dev/null
@@ -1,53 +0,0 @@
-use std::io;
-
-fn 종화는_방구쟁이야() {
-    let mut buffer = String::new();
-    io::stdin().read_line(&mut buffer).unwrap();
-    let buffer:Vec<usize> = buffer.split_ascii_whitespace()
-        .map(|x| x.trim().parse::<usize>().unwrap())
-        .collect();
-    let (n, m) = (buffer[0], buffer[1]);
-
-    let mut adj = vec![vec![0; m]; n];
-
-    for i in 0..n {
-        let mut buffer = String::new();
-        io::stdin().read_line(&mut buffer).unwrap();
-        let buffer:Vec<usize> = buffer.split_ascii_whitespace()
-            .map(|x| x.trim().parse::<usize>().unwrap())
-            .collect();
-        for j in 0..m {
-            adj[i][j] = buffer[j];
-        }
-    }
-
-    let mut ret = 0;
-    let mut visited = vec![vec![false; m]; n];
-
-    for i in 0..n {
-        for j in 0..m {
-            if !visited[i][j] && adj[i][j] == 1 {
-                dfs(i, j, &adj, &mut visited, (n, m));
-                ret += 1;
-            }
-        }
-    }
-
-    print!("{ret}");
-}
-
-fn dfs(y:usize, x:usize, adj: &Vec<Vec<usize>>, visited:&mut Vec<Vec<bool>>, (n, m): (usize, usize)) {
-    let dy:Vec<isize> = vec![-1, 0, 1, 0];
-    let dx:Vec<isize> = vec![0, 1, 0, -1];
-    visited[y][x] = true;
-
-    for i in 0..4 {
-        let ny:isize = y as isize - dy[i];
-        let nx:isize = x as isize - dx[i];
-
-        if ny < 0 || ny >= n as isize || nx < 0 || nx >= m as isize { continue }
-        if visited[ny as usize][nx as usize] { continue }
-        if adj[ny as usize][nx as usize] as usize == 0 { continue }
-        dfs(ny as usize, nx as usize, &adj, visited, (n, m));
-    }
-}
\ No newline at end of file
